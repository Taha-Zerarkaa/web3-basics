This hardhat plugin adds a mechanism to deploy contracts to any network, keeping track of them and replicating the same environment for testing.

It also adds a mechanism to associate names to addresses, so test and deployment scripts can be reconfigured by simply changing the address a name points to, allowing different configurations per network. This also results in much clearer tests and deployment scripts (no more accounts[0] in your code).

This plugin contains a lot more features too, all geared toward a better developer experience :

chain configuration export
listing deployed contracts' addresses and their abis (useful for webapps)
library linking at time of deployment.
deterministic deployment across networks.
support for specific deploy script per network (L1 vs L2 for example)
ability to access deployment from "companion" networks
deployment dependency system (allowing you to only deploy what is needed).
deployment retrying (by saving pending tx): so you can feel confident when making a deployment that you can always recover.
deployments as test fixture using evm_snapshot to speed up testing.
ability to create your own test fixture that automatically benefits from evm_snapshot's tests speed-up boost
combined with hardhat-deploy-ethers it has the ability to get ethers contract instance by name (like await ethers.getContract("ContractName")).
importing artifact from external sources (like npm packages), including truffle support.
importing deployments from external sources (like npm packages)
ability to log information in deploy mode only (while in test the console remains clean).
contains helpers to read and execute transaction on deployed contract referring to them by name.
These helpers contains options to auto mine on dev network (to speed up test deployments).
save metadata of deployed contract so they can always be fully verified, via sourcify or etherscan.
ability to submit contract source to etherscan and sourcify for verification at any time. (Because hardhat-deploy will save all the necessary info, it can be executed at any time.)
support harhdat's fork feature so deployment can be accessed even when run through fork.
named accounts are automatically impersonnated too, so you can perform tx as if you had their private key.
proxy deployment with ability to upgrade them transparently, only if code changes.
this include support for openzeppelin transparent proxies
diamond deployment with facets, allowing you to focus on what the new version will be. It will generate the diamondCut necessary to reach the new state.
watch and deploy: hardhat-deploy can watch both your deploy script and contract code and redeploy on changes.
HCR (Hot Contract Replacement): the watch feature combined with proxy or diamond, gives you an experience akin to frontend Hot Module Replacement: once your contract changes, the deployment is executed and your contract retains the same address and same state, allowing you to tweak your contracts while debugging your front-end.